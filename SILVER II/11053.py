# 11053 # DP # 성공 # 문제 이해를 위한 검색 및 코드 검색 결과 참고
# 가장 긴 증가하는 부분 수열

# 수열 A가 주어졌을 때, 가장 긴 증가하는 부분 수열을 구하는 프로그램을 작성하시오.
# 예를 들어, A = {10, 20, 10, 30, 20, 50} 인 경우에 가장 긴 증가하는 부분 수열은
# {10, 20, 30, 50} 이고 길이는 4이다.
# 첫째 줄에 수열 A의 크기 N(1<=N<=1,000)이 주어진다.
# 둘째 줄에는 수열 A를 이루고 있는 Ai가 주어진다.(1<=Ai<=1,000)

# 새로운 예제 :
# 만약 A = {6, 2, 5, 1, 7, 4, 8, 3}이 있을 때 가장 긴 증가하는 수열은
# {2, 5, 7, 8}이 된다. 증가하는  수열은 {2, 5}, {2, 7} 등 많지만 그 중 가장 긴 것이 완성.

n = int(input())
li = list(map(int, input().split(' ')))

dp = [1] * n # 본인이 포함되면 무조건 1값을 가지기 때문
# dp에는 만들어지는 수열의 길이 저장.
for i in range(n) :
    for j in range(i) :
        if li[i]>li[j] :
            dp[i] = max(dp[i], dp[j]+1)
            # 왜 dp[i]와 max 값을 다투냐면
            # { 6 2 5 1 7 4 8 3 } 과 같은 예시가 있을 때
            # 7에 해당하는 dp 값은 5에 해당하는 dp 값 + 1 이어야.
            # 5와 7을 비교할 때, 그 값은 dp[i]에 저장이 되었고
            # 그 뒤에 1과 7을 비교하면서 값을 유지하기 위해 이와 같이 진행.

print(max(dp))
